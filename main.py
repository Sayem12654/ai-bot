import logging
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
import rss_processor
import cohere_generator
import blogger_poster
import database
import config

# рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ржорзЗржЗржи ржХрж┐ржмрзЛрж░рзНржб
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("ЁЯУЭ Generate Post")],
        [KeyboardButton("тЮХ Add Feed"), KeyboardButton("ЁЯЫая╕П Help")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# /start ржХржорж╛ржирзНржб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_msg = (
        f"ЁЯдЦ рж╕рзНржмрж╛ржЧрждржо {user.first_name}!\n\n"
        "ЁЯЪА ржЖржорж┐ ржЖржкржирж╛рж░ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржмрзНрж▓ржЧрж╛рж░ ржмржЯ\n"
        "ЁЯУ░ RSS ржлрж┐ржб ржерзЗржХрзЗ ржирж┐ржЙржЬ рж╕ржВржЧрзНрж░рж╣ тЮбя╕П AI ржжрж┐ржпрж╝рзЗ ржЖрж░рзНржЯрж┐ржХрзЗрж▓ рждрзИрж░рж┐ тЮбя╕П ржмрзНрж▓ржЧрж╛рж░рзЗ ржкрзЛрж╕рзНржЯ\n\n"
        "ЁЯСЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи"
    )
    await update.message.reply_text(
        welcome_msg,
        reply_markup=get_main_keyboard()
    )

# ЁЯУЭ Generate Post рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def generate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("ЁЯФН рж╕рж░рзНржмрж╢рзЗрж╖ ржирж┐ржЙржЬ ржЦрзБржБржЬржЫрж┐...")
        
        # RSS ржерзЗржХрзЗ ржирж┐ржЙржЬ рж╕ржВржЧрзНрж░рж╣
        news = rss_processor.get_latest_news()
        if not news:
            await update.message.reply_text("тЪая╕П ржХрзЛржи ржирж┐ржЙржЬ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐! ржирждрзБржи RSS ржлрж┐ржб ржпрзЛржЧ ржХрж░рзБржи")
            return
        
        await update.message.reply_text(f"ЁЯУ░ ржкрзЗрзЯрзЗржЫрж┐: {news['title']}")
        await update.message.reply_text("ЁЯдЦ AI ржжрж┐рзЯрзЗ ржЖрж░рзНржЯрж┐ржХрзЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        
        # Cohere AI ржжрж┐рзЯрзЗ ржЖрж░рзНржЯрж┐ржХрзЗрж▓ ржЬрзЗржирж╛рж░рзЗржЯ
        article = cohere_generator.generate_seo_article(news['title'], news['summary'], news['region'])
        
        await update.message.reply_text("ЁЯЪА ржмрзНрж▓ржЧрж╛рж░рзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
        
        # ржмрзНрж▓ржЧрж╛рж░рзЗ ржкрзЛрж╕рзНржЯ
        result = blogger_poster.create_post(
            news['title'], 
            article, 
            news.get('image')
        )
        
        if result['success']:
            await update.message.reply_text(
                f"тЬЕ рж╕ржлрж▓!\n\n"
                f"ЁЯУЭ {result['title']}\n"
                f"ЁЯФЧ {result['url']}"
            )
        else:
            await update.message.reply_text(f"тЭМ рждрзНрж░рзБржЯрж┐: {result['error']}")
            
    except Exception as e:
        logger.error(f"рждрзНрж░рзБржЯрж┐: {str(e)}")
        await update.message.reply_text(f"тЪая╕П рждрзНрж░рзБржЯрж┐: {str(e)}")

# Help ржХржорж╛ржирзНржб
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ЁЯЖШ рж╕рж╛рж╣рж╛ржпрзНржп:\n\n"
        "тАв 'ЁЯУЭ Generate Post' - ржирждрзБржи ржкрзЛрж╕рзНржЯ рждрзИрж░рж┐ ржХрж░рзБржи\n"
        "тАв 'тЮХ Add Feed' - RSS ржлрж┐ржб ржпрзЛржЧ ржХрж░рзБржи\n\n"
        "ржХржорж╛ржирзНржб:\n"
        "/add_feed [url] [region] - ржирждрзБржи RSS ржлрж┐ржб\n"
        "/set_blog [id] - ржмрзНрж▓ржЧ ржЖржЗржбрж┐ рж╕рзЗржЯ ржХрж░рзБржи"
    )
    await update.message.reply_text(help_text)

# тЮХ Add Feed рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
async def add_feed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "тЮХ RSS ржлрж┐ржб ржпрзЛржЧ ржХрж░рждрзЗ:\n\n"
        "ржлрж░ржорзНржпрж╛ржЯ: /add_feed [URL] [region]\n"
        "ржЙржжрж╛рж╣рж░ржг: /add_feed https://example.com/rss.xml usa\n\n"
        "Region: usa ржмрж╛ eu"
    )

# ржорзЗржЗржи ржлрж╛ржВрж╢ржи
def main():
    # ржбрж╛ржЯрж╛ржмрзЗрж╕ ржЗржирж┐рж╢рж┐рзЯрж╛рж▓рж╛ржЗржЬ
    database.init_db()
    
    # ржмржЯ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи рждрзИрж░рж┐
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add_feed", add_feed_command))
    
    # ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    application.add_handler(MessageHandler(filters.Regex(r'^ЁЯУЭ Generate Post$'), generate_post))
    application.add_handler(MessageHandler(filters.Regex(r'^тЮХ Add Feed$'), add_feed))
    application.add_handler(MessageHandler(filters.Regex(r'^ЁЯЫая╕П Help$'), help_command))
    
    # ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи
    application.run_polling()
    logger.info("ЁЯдЦ ржмржЯ рж╕ржЪрж▓...")

if __name__ == '__main__':
    main()
